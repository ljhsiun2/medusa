.global s_prepare_buffers
s_prepare_buffers:
push %r10
push %r8
push %rbp
push %rcx
push %rdi
push %rsi
lea addresses_D_ht+0x9cf7, %rsi
lea addresses_UC_ht+0x1df7, %rdi
nop
nop
nop
nop
cmp %r10, %r10
mov $111, %rcx
rep movsw
nop
nop
nop
nop
xor $35960, %rcx
lea addresses_UC_ht+0xe0f7, %rbp
add $49369, %rsi
mov (%rbp), %r8
nop
nop
nop
nop
cmp $64132, %rsi
pop %rsi
pop %rdi
pop %rcx
pop %rbp
pop %r8
pop %r10
ret

    .global s_faulty_load
s_faulty_load:
push %r12
push %r14
push %r15
push %r8
push %rax
push %rcx
push %rsi

// Store
lea addresses_RW+0x69f7, %r12
nop
nop
nop
nop
nop
add %r14, %r14
mov $0x5152535455565758, %rax
movq %rax, %xmm7
movups %xmm7, (%r12)
nop
nop
nop
nop
nop
cmp $53194, %rsi

// Faulty Load
lea addresses_RW+0x195f7, %r8
cmp %rcx, %rcx
movb (%r8), %r12b
lea oracles, %r15
and $0xff, %r12
shlq $12, %r12
mov (%r15,%r12,1), %r12
pop %rsi
pop %rcx
pop %rax
pop %r8
pop %r15
pop %r14
pop %r12
ret

/*
<gen_faulty_load>
[REF]
{'OP': 'LOAD', 'src': {'size': 16, 'NT': False, 'type': 'addresses_RW', 'same': False, 'AVXalign': True, 'congruent': 0}}
{'OP': 'STOR', 'dst': {'size': 16, 'NT': False, 'type': 'addresses_RW', 'same': False, 'AVXalign': False, 'congruent': 7}}
[Faulty Load]
{'OP': 'LOAD', 'src': {'size': 1, 'NT': False, 'type': 'addresses_RW', 'same': True, 'AVXalign': False, 'congruent': 0}}
<gen_prepare_buffer>
{'OP': 'REPM', 'src': {'same': False, 'type': 'addresses_D_ht', 'congruent': 8}, 'dst': {'same': False, 'type': 'addresses_UC_ht', 'congruent': 10}}
{'OP': 'LOAD', 'src': {'size': 8, 'NT': False, 'type': 'addresses_UC_ht', 'same': False, 'AVXalign': False, 'congruent': 8}}
{'32': 21829}

*/
