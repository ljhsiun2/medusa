.global s_prepare_buffers
s_prepare_buffers:
push %r12
push %r13
push %r14
push %rsi
lea addresses_D_ht+0x1712d, %rsi
sub %r14, %r14
mov $0x6162636465666768, %r13
movq %r13, %xmm4
vmovups %ymm4, (%rsi)
dec %r12
pop %rsi
pop %r14
pop %r13
pop %r12
ret

    .global s_faulty_load
s_faulty_load:
push %r12
push %r14
push %r15
push %r8
push %r9
push %rbx
push %rcx

// Load
lea addresses_normal+0x1602d, %r8
nop
nop
nop
nop
nop
cmp %rbx, %rbx
movups (%r8), %xmm1
vpextrq $0, %xmm1, %r15
nop
nop
nop
cmp %r14, %r14

// Load
mov $0x71201c00000004f9, %r12
xor $21983, %rcx
movntdqa (%r12), %xmm1
vpextrq $1, %xmm1, %r8
nop
nop
and %r9, %r9

// Store
lea addresses_RW+0x1ad, %r8
sub $7010, %r14
movb $0x51, (%r8)
nop
nop
nop
nop
and %rcx, %rcx

// Store
lea addresses_normal+0xb565, %r12
nop
inc %r8
mov $0x5152535455565758, %rbx
movq %rbx, %xmm1
vmovups %ymm1, (%r12)
nop
nop
nop
nop
inc %rcx

// Faulty Load
lea addresses_RW+0x1ae2d, %r9
nop
nop
and $44974, %r15
mov (%r9), %r14w
lea oracles, %rcx
and $0xff, %r14
shlq $12, %r14
mov (%rcx,%r14,1), %r14
pop %rcx
pop %rbx
pop %r9
pop %r8
pop %r15
pop %r14
pop %r12
ret

/*
<gen_faulty_load>
[REF]
{'src': {'same': False, 'congruent': 0, 'NT': False, 'type': 'addresses_RW', 'size': 2, 'AVXalign': False}, 'OP': 'LOAD'}
{'src': {'same': False, 'congruent': 7, 'NT': False, 'type': 'addresses_normal', 'size': 16, 'AVXalign': False}, 'OP': 'LOAD'}
{'src': {'same': False, 'congruent': 2, 'NT': True, 'type': 'addresses_NC', 'size': 16, 'AVXalign': False}, 'OP': 'LOAD'}
{'OP': 'STOR', 'dst': {'same': False, 'congruent': 1, 'NT': False, 'type': 'addresses_RW', 'size': 1, 'AVXalign': False}}
{'OP': 'STOR', 'dst': {'same': False, 'congruent': 2, 'NT': False, 'type': 'addresses_normal', 'size': 32, 'AVXalign': False}}
[Faulty Load]
{'src': {'same': True, 'congruent': 0, 'NT': False, 'type': 'addresses_RW', 'size': 2, 'AVXalign': False}, 'OP': 'LOAD'}
<gen_prepare_buffer>
{'OP': 'STOR', 'dst': {'same': False, 'congruent': 8, 'NT': False, 'type': 'addresses_D_ht', 'size': 32, 'AVXalign': False}}
{'32': 5083}

*/
