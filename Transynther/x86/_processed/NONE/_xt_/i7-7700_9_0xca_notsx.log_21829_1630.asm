.global s_prepare_buffers
s_prepare_buffers:
push %r10
push %r11
push %r8
push %rcx
push %rdi
push %rsi
lea addresses_WT_ht+0xae88, %r8
nop
nop
nop
nop
xor $12403, %r11
movb $0x61, (%r8)
nop
dec %r11
lea addresses_WC_ht+0x3668, %rsi
lea addresses_A_ht+0x11588, %rdi
nop
nop
nop
nop
xor %r10, %r10
mov $98, %rcx
rep movsb
sub %rcx, %rcx
lea addresses_D_ht+0x2688, %rsi
lea addresses_WC_ht+0x7a88, %rdi
nop
nop
nop
nop
sub %r8, %r8
mov $69, %rcx
rep movsb
nop
nop
nop
dec %rsi
pop %rsi
pop %rdi
pop %rcx
pop %r8
pop %r11
pop %r10
ret

    .global s_faulty_load
s_faulty_load:
push %r11
push %r13
push %r15
push %r8
push %rax
push %rbp
push %rbx

// Load
lea addresses_RW+0xa288, %r11
cmp %r8, %r8
movb (%r11), %r15b
nop
nop
nop
nop
nop
inc %rax

// Faulty Load
lea addresses_RW+0xa288, %r13
nop
nop
lfence
mov (%r13), %rax
lea oracles, %r13
and $0xff, %rax
shlq $12, %rax
mov (%r13,%rax,1), %rax
pop %rbx
pop %rbp
pop %rax
pop %r8
pop %r15
pop %r13
pop %r11
ret

/*
<gen_faulty_load>
[REF]
{'src': {'NT': False, 'AVXalign': False, 'size': 32, 'congruent': 0, 'same': False, 'type': 'addresses_RW'}, 'OP': 'LOAD'}
{'src': {'NT': False, 'AVXalign': False, 'size': 1, 'congruent': 0, 'same': True, 'type': 'addresses_RW'}, 'OP': 'LOAD'}
[Faulty Load]
{'src': {'NT': False, 'AVXalign': False, 'size': 8, 'congruent': 0, 'same': True, 'type': 'addresses_RW'}, 'OP': 'LOAD'}
<gen_prepare_buffer>
{'dst': {'NT': False, 'AVXalign': False, 'size': 1, 'congruent': 7, 'same': False, 'type': 'addresses_WT_ht'}, 'OP': 'STOR'}
{'src': {'congruent': 5, 'same': False, 'type': 'addresses_WC_ht'}, 'dst': {'congruent': 7, 'same': False, 'type': 'addresses_A_ht'}, 'OP': 'REPM'}
{'src': {'congruent': 10, 'same': False, 'type': 'addresses_D_ht'}, 'dst': {'congruent': 7, 'same': False, 'type': 'addresses_WC_ht'}, 'OP': 'REPM'}
{'32': 21829}

*/
