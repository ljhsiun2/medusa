.global s_prepare_buffers
s_prepare_buffers:
push %r10
push %rax
push %rbx
push %rcx
push %rdi
push %rdx
push %rsi
lea addresses_A_ht+0x1905, %r10
nop
nop
sub $42137, %rdx
mov (%r10), %eax
and %rdi, %rdi
lea addresses_UC_ht+0x1d845, %rbx
nop
nop
nop
nop
nop
inc %r10
movb $0x61, (%rbx)
nop
nop
nop
sub $51016, %rsi
lea addresses_WC_ht+0x45a5, %rsi
lea addresses_normal_ht+0x1ba5, %rdi
nop
nop
nop
add %rdx, %rdx
mov $65, %rcx
rep movsl
nop
nop
nop
nop
nop
cmp %rdx, %rdx
lea addresses_A_ht+0x3e85, %rdi
clflush (%rdi)
nop
nop
nop
nop
nop
and %rsi, %rsi
movb (%rdi), %bl
nop
nop
nop
nop
add $44750, %rdi
pop %rsi
pop %rdx
pop %rdi
pop %rcx
pop %rbx
pop %rax
pop %r10
ret

    .global s_faulty_load
s_faulty_load:
push %r10
push %r14
push %r8
push %rdx

// Faulty Load
lea addresses_RW+0x1f845, %rdx
nop
nop
nop
nop
nop
cmp $6121, %r8
mov (%rdx), %r10
lea oracles, %rdx
and $0xff, %r10
shlq $12, %r10
mov (%rdx,%r10,1), %r10
pop %rdx
pop %r8
pop %r14
pop %r10
ret

/*
<gen_faulty_load>
[REF]
{'OP': 'LOAD', 'src': {'same': True, 'NT': False, 'AVXalign': False, 'size': 2, 'type': 'addresses_RW', 'congruent': 0}}
[Faulty Load]
{'OP': 'LOAD', 'src': {'same': True, 'NT': False, 'AVXalign': False, 'size': 8, 'type': 'addresses_RW', 'congruent': 0}}
<gen_prepare_buffer>
{'OP': 'LOAD', 'src': {'same': False, 'NT': False, 'AVXalign': False, 'size': 4, 'type': 'addresses_A_ht', 'congruent': 6}}
{'dst': {'same': False, 'NT': False, 'AVXalign': False, 'size': 1, 'type': 'addresses_UC_ht', 'congruent': 11}, 'OP': 'STOR'}
{'dst': {'same': False, 'congruent': 4, 'type': 'addresses_normal_ht'}, 'OP': 'REPM', 'src': {'same': False, 'congruent': 5, 'type': 'addresses_WC_ht'}}
{'OP': 'LOAD', 'src': {'same': False, 'NT': False, 'AVXalign': False, 'size': 1, 'type': 'addresses_A_ht', 'congruent': 6}}
{'32': 21829}

*/
