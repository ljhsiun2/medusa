.global s_prepare_buffers
s_prepare_buffers:
push %r10
push %r14
push %r8
push %r9
push %rax
push %rbp
lea addresses_A_ht+0x83c1, %r8
nop
and %rbp, %rbp
mov (%r8), %r9d
nop
nop
add %r14, %r14
lea addresses_WT_ht+0xb161, %rax
xor %r10, %r10
mov (%rax), %r8
nop
cmp $41849, %r10
pop %rbp
pop %rax
pop %r9
pop %r8
pop %r14
pop %r10
ret

    .global s_faulty_load
s_faulty_load:
push %r10
push %r12
push %r13
push %r14
push %rbx
push %rdi
push %rsi

// Store
lea addresses_D+0x19e61, %rsi
nop
nop
nop
add $5053, %r12
mov $0x5152535455565758, %r13
movq %r13, %xmm7
movups %xmm7, (%rsi)
nop
nop
dec %rbx

// Store
lea addresses_normal+0x9b16, %r12
clflush (%r12)
nop
dec %rdi
mov $0x5152535455565758, %r13
movq %r13, (%r12)
nop
nop
nop
sub %r14, %r14

// Faulty Load
lea addresses_RW+0x17a61, %rbx
nop
nop
nop
xor %rsi, %rsi
mov (%rbx), %r13d
lea oracles, %rsi
and $0xff, %r13
shlq $12, %r13
mov (%rsi,%r13,1), %r13
pop %rsi
pop %rdi
pop %rbx
pop %r14
pop %r13
pop %r12
pop %r10
ret

/*
<gen_faulty_load>
[REF]
{'src': {'same': False, 'congruent': 0, 'NT': True, 'type': 'addresses_RW', 'size': 16, 'AVXalign': False}, 'OP': 'LOAD'}
{'OP': 'STOR', 'dst': {'same': False, 'congruent': 8, 'NT': False, 'type': 'addresses_D', 'size': 16, 'AVXalign': False}}
{'OP': 'STOR', 'dst': {'same': False, 'congruent': 0, 'NT': True, 'type': 'addresses_normal', 'size': 8, 'AVXalign': False}}
[Faulty Load]
{'src': {'same': True, 'congruent': 0, 'NT': False, 'type': 'addresses_RW', 'size': 4, 'AVXalign': False}, 'OP': 'LOAD'}
<gen_prepare_buffer>
{'src': {'same': False, 'congruent': 4, 'NT': False, 'type': 'addresses_A_ht', 'size': 4, 'AVXalign': True}, 'OP': 'LOAD'}
{'src': {'same': False, 'congruent': 6, 'NT': False, 'type': 'addresses_WT_ht', 'size': 8, 'AVXalign': False}, 'OP': 'LOAD'}
{'32': 21829}

*/
